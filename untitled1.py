# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14M5zPSiUjO47G_cIgYyBqbNOIhBG2VSd
"""

!pip install datasets

from huggingface_hub import hf_hub_download
import zipfile

# Download the file manually from Hugging Face
zip_path = hf_hub_download(
    repo_id="vahrohit/IndianFoodImages",
    filename="IndianFoodImages.zip",  # Ensure this name matches exactly
    repo_type="dataset"
)

# Check the file and unzip
print(f"Downloaded file: {zip_path}")

# Try unzipping it
with zipfile.ZipFile(zip_path, 'r') as zip_ref:
    zip_ref.extractall("/content/IndianFoodImages")

# file: load_clean_dataset.py

import os
import zipfile
import shutil
from pathlib import Path
from PIL import Image, UnidentifiedImageError

import torch
from torchvision import datasets, transforms
from torch.utils.data import DataLoader

# 1. Extract Dataset if in zip format
zip_path = 'data/your_dataset.zip'  # Change if needed
extract_dir = '/content/IndianFoodImages/IndianFoodImages'

if not os.path.exists(extract_dir):
    with zipfile.ZipFile(zip_path, 'r') as zip_ref:
        zip_ref.extractall(extract_dir)

# Remove non-class folders like .git from the dataset root
for d in Path(extract_dir).iterdir():
    if d.name.startswith('.') and d.is_dir():
        print(f"Removing non-class folder: {d}")
        shutil.rmtree(d)

# 2. Clean corrupted images
def remove_corrupted_images(root_dir):
    removed = 0
    for class_dir in Path(root_dir).iterdir():
        if not class_dir.is_dir():
            continue
        for img_file in class_dir.iterdir():
            if img_file.is_dir() or img_file.name.startswith('.'):
                continue
            try:
                img = Image.open(img_file)
                img.verify()
                img = Image.open(img_file)
                img.load()

                if img.mode not in ("RGB", "RGBA"):
                    raise ValueError("Unsupported image mode")
                if img.size[0] < 10 or img.size[1] < 10:
                    raise ValueError("Image too small")

            except (UnidentifiedImageError, OSError, IOError, ValueError) as e:
                print(f"Removed corrupted: {img_file} ({e})")
                img_file.unlink()
                removed += 1
    print(f"Total removed images: {removed}")

remove_corrupted_images(extract_dir)

# 3. Create Transforms and DataLoader
transform = transforms.Compose([
    transforms.Resize((224, 224)),
    transforms.ToTensor(),
    transforms.Normalize(mean=[0.5]*3, std=[0.5]*3)
])

dataset = datasets.ImageFolder(root=extract_dir, transform=transform)
dataloader = DataLoader(dataset, batch_size=32, shuffle=True, num_workers=2)

# Classes available
print("Classes:", dataset.classes)
print("Total images:", len(dataset))

# Example usage: loop through 1 batch
def preview_batch():
    for images, labels in dataloader:
        print(f"Batch shape: {images.shape}, Labels: {labels[:8]}")
        break

if __name__ == "__main__":
    preview_batch()

import os
import torch
import torch.nn as nn
import torch.optim as optim
from torchvision import models, datasets, transforms
from torch.utils.data import DataLoader, random_split
import shutil
# --- Config ---
data_dir = '/content/IndianFoodImages/IndianFoodImages'
batch_size = 32
num_epochs = 4
learning_rate = 1e-4
val_split = 0.2
image_size = 224
device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')

# --- Transforms ---
transform = transforms.Compose([
    transforms.Resize((image_size, image_size)),
    transforms.ToTensor(),
    transforms.Normalize(mean=[0.485, 0.456, 0.406],
                         std=[0.229, 0.224, 0.225])
])
# Make sure no non-class folders exist (especially hidden ones like .git)
for d in os.listdir(data_dir):
    full_path = os.path.join(data_dir, d)
    if d.startswith('.') or not os.path.isdir(full_path):
        print(f"Removing non-class folder: {full_path}")
        shutil.rmtree(full_path)

# --- Dataset Loading ---
full_dataset = datasets.ImageFolder(data_dir, transform=transform)
class_names = full_dataset.classes
num_classes = len(class_names)

# --- Train/Validation Split ---
val_size = int(val_split * len(full_dataset))
train_size = len(full_dataset) - val_size
train_dataset, val_dataset = random_split(full_dataset, [train_size, val_size])

train_loader = DataLoader(train_dataset, batch_size=batch_size, shuffle=True)
val_loader = DataLoader(val_dataset, batch_size=batch_size)

# --- Model Setup ---
model = models.resnet18(pretrained=True)

# Optional: Freeze early layers
# for param in model.parameters():
#     param.requires_grad = False

# Replace final layer
model.fc = nn.Linear(model.fc.in_features, num_classes)
model = model.to(device)

# --- Loss & Optimizer ---
criterion = nn.CrossEntropyLoss()
optimizer = optim.Adam(model.parameters(), lr=learning_rate)

# --- Training Loop ---
for epoch in range(num_epochs):
    model.train()
    train_loss, train_correct, train_total = 0, 0, 0

    for images, labels in train_loader:
        images, labels = images.to(device), labels.to(device)

        optimizer.zero_grad()
        outputs = model(images)
        loss = criterion(outputs, labels)
        loss.backward()
        optimizer.step()

        train_loss += loss.item()
        _, predicted = outputs.max(1)
        train_correct += predicted.eq(labels).sum().item()
        train_total += labels.size(0)

    train_acc = 100 * train_correct / train_total

    # Validation
    model.eval()
    val_correct, val_total = 0, 0
    with torch.no_grad():
        for images, labels in val_loader:
            images, labels = images.to(device), labels.to(device)
            outputs = model(images)
            _, predicted = outputs.max(1)
            val_correct += predicted.eq(labels).sum().item()
            val_total += labels.size(0)

    val_acc = 100 * val_correct / val_total
    print(f"Epoch {epoch+1}/{num_epochs} - Train Loss: {train_loss:.4f} - Train Acc: {train_acc:.2f}% - Val Acc: {val_acc:.2f}%")

# --- Save Model and Class Index Mapping ---
torch.save({
    'model_state_dict': model.state_dict(),
    'class_to_idx': full_dataset.class_to_idx,
}, 'resnet18_indian_food_classifier.pth')

import torch
from torchvision import transforms
from PIL import Image
import os

# Path to your saved model (if you saved it)
# Load saved checkpoint
checkpoint = torch.load('/content/resnet18_indian_food_classifier.pth', map_location=device)

# Load weights into model
model.load_state_dict(checkpoint['model_state_dict'])

# Restore class names if needed
class_to_idx = checkpoint['class_to_idx']
idx_to_class = {v: k for k, v in class_to_idx.items()}


# Make sure to use the same transforms as during training
transform = transforms.Compose([
    transforms.Resize((224, 224)),
    transforms.ToTensor(),
    transforms.Normalize(mean=[0.5]*3, std=[0.5]*3)
])

# Function to predict class from image path
def predict_image(image_path, model, class_names):
    model.eval()
    image = Image.open(image_path).convert('RGB')
    image = transform(image).unsqueeze(0)  # Add batch dimension

    with torch.no_grad():
        outputs = model(image.to(device))
        _, predicted = torch.max(outputs, 1)
        class_name = class_names[predicted.item()]
    return class_name

# Example usage
test_image_path = "/content/th (2).jpg"  # Change this
predicted_label = predict_image(test_image_path, model, class_names)
print(f"Predicted class: {predicted_label}")

